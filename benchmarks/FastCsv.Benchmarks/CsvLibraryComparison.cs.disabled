using BenchmarkDotNet.Attributes;
using CsvHelper;
using CsvHelper.Configuration;
using ServiceStack.Text;
using Sylvan.Data.Csv;
using System.Globalization;
using System.Text;
using nietras.SeparatedValues;

namespace FastCsv.Benchmarks;

/// <summary>
/// Comprehensive comparison of popular .NET CSV libraries
/// Libraries tested:
/// - FastCsv (our implementation)
/// - CsvHelper (most popular)
/// - Sylvan.Data.Csv (high performance)
/// - CsvReader (lightweight)
/// - Sep (high performance, modern)
/// - ServiceStack.Text (full-featured)
/// - Csv (Kent Boggart's library)
/// </summary>
[MemoryDiagnoser]
[SimpleJob(warmupCount: 3, iterationCount: 5)]
[RankColumn]
public class CsvLibraryComparison
{
    private string _smallCsv = "";
    private string _mediumCsv = "";
    private string _largeCsv = "";
    
    private ReadOnlyMemory<char> _smallMemory;
    private ReadOnlyMemory<char> _mediumMemory;
    private ReadOnlyMemory<char> _largeMemory;

    [Params(10, 1000, 10000)]
    public int RowCount { get; set; }

    [GlobalSetup]
    public void Setup()
    {
        _smallCsv = GenerateCsv(10);
        _mediumCsv = GenerateCsv(1000);
        _largeCsv = GenerateCsv(10000);
        
        _smallMemory = _smallCsv.AsMemory();
        _mediumMemory = _mediumCsv.AsMemory();
        _largeMemory = _largeCsv.AsMemory();
    }

    private string GenerateCsv(int rows)
    {
        var sb = new StringBuilder();
        sb.AppendLine("ID,Name,Age,City,Country,Salary,Description");
        
        for (int i = 0; i < rows; i++)
        {
            sb.AppendLine($"{i},Person{i},{20 + i % 50},City{i % 100},Country{i % 20},{30000 + i * 100},\"Description for person {i} with some longer text\"");
        }
        
        return sb.ToString();
    }

    private string GetCsvData() => RowCount switch
    {
        10 => _smallCsv,
        1000 => _mediumCsv,
        10000 => _largeCsv,
        _ => _mediumCsv
    };
    
    private ReadOnlyMemory<char> GetCsvMemory() => RowCount switch
    {
        10 => _smallMemory,
        1000 => _mediumMemory,
        10000 => _largeMemory,
        _ => _mediumMemory
    };

    // ============= FastCsv (Our Implementation) =============
    
    [Benchmark(Baseline = true)]
    public int FastCsv_String()
    {
        var csv = GetCsvData();
        var records = global::FastCsv.Csv.ReadAllRecords(csv);
        return records.Count;
    }

    [Benchmark]
    public int FastCsv_Memory()
    {
        var csv = GetCsvMemory();
        var records = global::FastCsv.Csv.ReadAllRecords(csv);
        return records.Count;
    }

    // ============= CsvHelper (Most Popular) =============
    
    [Benchmark]
    public int CsvHelper_TextReader()
    {
        var csv = GetCsvData();
        using var reader = new StringReader(csv);
        using var csvReader = new CsvReader(reader, CultureInfo.InvariantCulture);
        
        var count = 0;
        while (csvReader.Read())
        {
            count++;
        }
        return count;
    }

    [Benchmark]
    public int CsvHelper_GetRecords()
    {
        var csv = GetCsvData();
        using var reader = new StringReader(csv);
        using var csvReader = new CsvReader(reader, CultureInfo.InvariantCulture);
        
        var records = csvReader.GetRecords<dynamic>().ToList();
        return records.Count;
    }

    // ============= Sylvan.Data.Csv (High Performance) =============

    [Benchmark]
    public int Sylvan_CsvDataReader()
    {
        var csv = GetCsvData();
        using var reader = new StringReader(csv);
        using var csvReader = CsvDataReader.Create(reader);
        
        var count = 0;
        while (csvReader.Read())
        {
            count++;
        }
        return count;
    }

    // ============= CsvReader (Lightweight) =============

    [Benchmark]
    public int CsvReader_Lightweight()
    {
        var csv = GetCsvData();
        using var reader = new StringReader(csv);
        using var csvReader = new LumenWorks.Framework.IO.Csv.CsvReader(reader, true);
        
        var count = 0;
        while (csvReader.ReadNextRecord())
        {
            count++;
        }
        return count;
    }

    // ============= Sep (High Performance, Modern) =============

    [Benchmark]
    public int Sep_Reader()
    {
        var csv = GetCsvData();
        using var reader = Sep.Reader().FromText(csv);
        
        var count = 0;
        foreach (var row in reader)
        {
            count++;
        }
        return count;
    }

    // ============= ServiceStack.Text =============

    [Benchmark]
    public int ServiceStack_CsvReader()
    {
        var csv = GetCsvData();
        var records = CsvReader<Dictionary<string, string>>.ParseLines(csv.Split('\n'));
        return records.Count();
    }

    // ============= Csv (Kent Boggart's) =============

    [Benchmark]
    public int Csv_KentBoggart()
    {
        var csv = GetCsvData();
        var records = Csv.CsvReader.ReadFromText(csv);
        return records.Count();
    }

    // ============= Raw String.Split (Baseline) =============

    [Benchmark]
    public int Raw_StringSplit()
    {
        var csv = GetCsvData();
        var lines = csv.Split('\n', StringSplitOptions.RemoveEmptyEntries);
        return lines.Length - 1; // Subtract header
    }

    // ============= System.IO.File.ReadLines (Reference) =============

    [Benchmark] 
    public int SystemIO_ReadLines()
    {
        // Create a temp file for fair comparison
        var tempFile = Path.GetTempFileName();
        try
        {
            File.WriteAllText(tempFile, GetCsvData());
            var lines = File.ReadLines(tempFile);
            return lines.Count() - 1; // Subtract header
        }
        finally
        {
            if (File.Exists(tempFile))
                File.Delete(tempFile);
        }
    }
}