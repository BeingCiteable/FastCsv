using BenchmarkDotNet.Attributes;
using CsvHelper;
using Sylvan.Data.Csv;
using ServiceStack.Text;
using System.Globalization;
using System.Text;
using nietras.SeparatedValues;

namespace FastCsv.Benchmarks;

/// <summary>
/// Memory allocation comparison focused on zero-allocation parsing
/// This benchmark specifically tests memory efficiency
/// </summary>
[MemoryDiagnoser]
[SimpleJob(warmupCount: 2, iterationCount: 3)]
[HideColumns("Error", "StdDev", "RatioSD")]
public class MemoryAllocationBenchmark
{
    private string _testCsv = "";
    private ReadOnlyMemory<char> _testMemory;
    private byte[] _testBytes = Array.Empty<byte>();

    [GlobalSetup]
    public void Setup()
    {
        // Medium-sized dataset for memory testing
        var sb = new StringBuilder();
        sb.AppendLine("ID,FirstName,LastName,Email,Age,City,Country");
        
        for (int i = 0; i < 1000; i++)
        {
            sb.AppendLine($"{i},John{i},Doe{i},john{i}@example.com,{25 + i % 40},City{i % 50},Country{i % 10}");
        }
        
        _testCsv = sb.ToString();
        _testMemory = _testCsv.AsMemory();
        _testBytes = Encoding.UTF8.GetBytes(_testCsv);
    }

    // ============= FastCsv Zero-Allocation Tests =============

    [Benchmark(Baseline = true)]
    [BenchmarkCategory("FastCsv")]
    public int FastCsv_String_ReadAll()
    {
        var records = global::FastCsv.Csv.ReadAllRecords(_testCsv);
        return records.Count;
    }

    [Benchmark]
    [BenchmarkCategory("FastCsv")]
    public int FastCsv_Memory_ReadAll()
    {
        var records = global::FastCsv.Csv.ReadAllRecords(_testMemory);
        return records.Count;
    }

    [Benchmark]
    [BenchmarkCategory("FastCsv")]
    public int FastCsv_Reader_Enumerate()
    {
        using var reader = global::FastCsv.Csv.CreateReader(_testCsv);
        var count = 0;
        while (reader.TryReadRecord(out _))
        {
            count++;
        }
        return count;
    }

    [Benchmark]
    [BenchmarkCategory("FastCsv")]
    public int FastCsv_Memory_Reader_Enumerate()
    {
        using var reader = global::FastCsv.Csv.CreateReader(_testMemory);
        var count = 0;
        while (reader.TryReadRecord(out _))
        {
            count++;
        }
        return count;
    }

    [Benchmark]
    [BenchmarkCategory("FastCsv")]
    public int FastCsv_CountOnly()
    {
        return global::FastCsv.Csv.CountRecords(_testCsv);
    }

    [Benchmark]
    [BenchmarkCategory("FastCsv")]
    public int FastCsv_Memory_CountOnly()
    {
        return global::FastCsv.Csv.CountRecords(_testMemory);
    }

    // ============= Competitor Libraries =============

    [Benchmark]
    [BenchmarkCategory("CsvHelper")]
    public int CsvHelper_ReadAll()
    {
        using var reader = new StringReader(_testCsv);
        using var csv = new CsvReader(reader, CultureInfo.InvariantCulture);
        
        var records = new List<string[]>();
        csv.Read(); // Read header
        csv.ReadHeader();
        
        while (csv.Read())
        {
            var record = new string[csv.HeaderRecord?.Length ?? 0];
            for (int i = 0; i < record.Length; i++)
            {
                record[i] = csv.GetField(i) ?? "";
            }
            records.Add(record);
        }
        
        return records.Count;
    }

    [Benchmark]
    [BenchmarkCategory("CsvHelper")]
    public int CsvHelper_Dynamic()
    {
        using var reader = new StringReader(_testCsv);
        using var csv = new CsvReader(reader, CultureInfo.InvariantCulture);
        var records = csv.GetRecords<dynamic>().ToList();
        return records.Count;
    }

    [Benchmark]
    [BenchmarkCategory("Sylvan")]
    public int Sylvan_ReadAll()
    {
        using var reader = new StringReader(_testCsv);
        using var csv = CsvDataReader.Create(reader);
        
        var records = new List<string[]>();
        while (csv.Read())
        {
            var record = new string[csv.FieldCount];
            for (int i = 0; i < csv.FieldCount; i++)
            {
                record[i] = csv.GetString(i);
            }
            records.Add(record);
        }
        
        return records.Count;
    }

    [Benchmark]
    [BenchmarkCategory("Sep")]
    public int Sep_ReadAll()
    {
        using var reader = Sep.Reader().FromText(_testCsv);
        
        var records = new List<string[]>();
        foreach (var row in reader)
        {
            var record = new string[row.ColCount];
            for (int i = 0; i < row.ColCount; i++)
            {
                record[i] = row[i].ToString();
            }
            records.Add(record);
        }
        
        return records.Count;
    }

    [Benchmark]
    [BenchmarkCategory("Sep")]
    public int Sep_CountOnly()
    {
        using var reader = Sep.Reader().FromText(_testCsv);
        
        var count = 0;
        foreach (var row in reader)
        {
            count++;
        }
        
        return count;
    }

    [Benchmark]
    [BenchmarkCategory("ServiceStack")]
    public int ServiceStack_ReadAll()
    {
        var lines = _testCsv.Split('\n', StringSplitOptions.RemoveEmptyEntries);
        var records = CsvReader<Dictionary<string, string>>.ParseLines(lines);
        return records.Count();
    }

    [Benchmark]
    [BenchmarkCategory("LumenWorks")]
    public int CsvReader_ReadAll()
    {
        using var reader = new StringReader(_testCsv);
        using var csv = new LumenWorks.Framework.IO.Csv.CsvReader(reader, true);
        
        var records = new List<string[]>();
        while (csv.ReadNextRecord())
        {
            var record = new string[csv.FieldCount];
            for (int i = 0; i < csv.FieldCount; i++)
            {
                record[i] = csv[i];
            }
            records.Add(record);
        }
        
        return records.Count;
    }

    [Benchmark]
    [BenchmarkCategory("Csv")]
    public int Csv_ReadAll()
    {
        var options = new Csv.CsvOptions
        {
            HeaderMode = Csv.HeaderMode.HeaderPresent
        };
        
        var records = Csv.CsvReader.ReadFromText(_testCsv, options).ToList();
        return records.Count;
    }

    // ============= Raw Performance Baseline =============

    [Benchmark]
    [BenchmarkCategory("Baseline")]
    public int Raw_SplitLines()
    {
        var lines = _testCsv.Split('\n', StringSplitOptions.RemoveEmptyEntries);
        return lines.Length - 1; // Subtract header
    }

    [Benchmark]
    [BenchmarkCategory("Baseline")]
    public int Raw_ReadOnlySpan_Lines()
    {
        var span = _testCsv.AsSpan();
        var count = 0;
        
        while (!span.IsEmpty)
        {
            var newlineIndex = span.IndexOf('\n');
            if (newlineIndex == -1)
                break;
                
            count++;
            span = span.Slice(newlineIndex + 1);
        }
        
        return count - 1; // Subtract header
    }
}